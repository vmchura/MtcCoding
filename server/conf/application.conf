# The application languages
# ~~~~~
play.i18n.langs=["en"]
play.http.secret.key="PFCe8ayRi2PB=3i=ZbTcstxeWSVoAPyrU2lO`B9^Awf`xV8zbKN_:N;OurKik6GS"


# The asset configuration
# ~~~~~
play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

# Registers the filters
# ~~~~~
play.http.filters = "utils.Filters"


slick {
  dbs {
    default {
      #profile = "slick.jdbc.PostgresProfile$"
      #profile = "models.mappers.CelaRefinedProfile$"
      profile = "models.mappers.CelaRefinedPostgresProfile$"
      db {
        driver = "org.postgresql.Driver"
        url = "jdbc:postgresql://localhost/celaUserDataDB"
        user = "postgres"
        password = ""
      }
    }
    admin {
      profile = "slick.jdbc.PostgresProfile$"

      db {
        driver = "org.postgresql.Driver"
        url = "jdbc:postgresql://localhost/celaAdminDB"
        user = "postgres"
        password = ""
      }
    }
  }
}

play.modules.enabled += "modules.DDLGeneratorModule"

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.authlayer.AuthModule"
play.modules.enabled += "modules.authlayer.AuthTokenCleanerModule"
play.modules.enabled += "modules.authlayer.AuthTokenModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}

play.evolutions.db.default.autocommit=false

# The generator of DDL, should be removed in production config
# Play mailer
play.mailer {
  host = "smtp.gmail.com" // (mandatory)
  port = 465 // (defaults to 25)
  ssl = yes // (defaults to no)
  tls = no // (defaults to no)
  tlsRequired = no // (defaults to no)
  user = "vmchura@gmail.com" // (optional)
  password = "Stomr@g3" // (optional)
  debug = no // (defaults to no, to take effect you also need to set the log level to "DEBUG" for the "play.mailer" logger)
  timeout = null // (defaults to 60s in milliseconds)
  connectiontimeout = null // (defaults to 60s in milliseconds)
  mock = no // (defaults to no, will only log all the email properties instead of sending an email)

}
# Security Filter Configuration - Content Security Policy
play.filters.csp {
  CSPFilter = "default-src 'self';"
  CSPFilter = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' localhost:8080 *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com chart.googleapis.com;"
  CSPFilter = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
  CSPFilter = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
  CSPFilter = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' cdnjs.cloudflare.com maps.googleapis.com;"
  CSPFilter = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com;"
}
#play.filters.csrf.header.bypassHeaders.Csrf-Token = "cela"
play.filters.disabled +=  play.filters.csrf.CSRFFilter
play.filters.disabled += "play.filters.cors.CORSFilter"
play.filters.csrf.header.bypassHeaders {
  Csrf-Token = "passtoken"
}
play.filters.cors {
  pathPrefixes = ["*", ...]
  allowedOrigins = ["*", ...]
  allowedHttpMethods = ["GET", "POST"]
  allowedHttpHeaders = ["Accept"]
  preflightMaxAge = 3 days
}
include "silhouette.conf"
